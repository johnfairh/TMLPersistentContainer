{
  "types\/loglevel.html?swift" : {
    "abstract" : "The category of message being logged, in descending order of importance.\nClients should normally be interested in recording error and warning and\nmay also be interested in info.",
    "name" : "LogLevel"
  },
  "types\/loglevel.html?swift#debug" : {
    "abstract" : "A message describing normal progress of the library that is probably only interesting\nwhen attempting to debug the library internals.\nOccurs often during normal operations.",
    "name" : "debug",
    "parent_name" : "LogLevel"
  },
  "types\/loglevel.html?swift#error" : {
    "abstract" : "A message describing a condition that will eventually lead to a persistent store not being loaded.\nFor example being unable to find an appropriate model for a persistent store.\nRare, does not occur at all during normal operations.",
    "name" : "error",
    "parent_name" : "LogLevel"
  },
  "types\/loglevel.html?swift#info" : {
    "abstract" : "A message describing normal progress of the library that may be of interest to\nan app developer.\nFor example listing all discovered models and their relations.\nOccurs fairly often during normal operations (<1KiB for a complex migration).",
    "name" : "info",
    "parent_name" : "LogLevel"
  },
  "types\/loglevel.html?swift#warning" : {
    "abstract" : "A message describing a condition that is unusual but does not immediately lead to a problem\nfor the app.\nFor example being unable to load a model from a file on disk.\nRare, does not occur at all during normal operations.",
    "name" : "warning",
    "parent_name" : "LogLevel"
  },
  "types\/logmessage.html?swift" : {
    "abstract" : "A log message generated by the library for the client to include in their logs.\nThese messages are intended to be human-readable although the audience is primarily\napp developers; these are not intended for end users.",
    "name" : "LogMessage"
  },
  "types\/logmessage.html?swift#body" : {
    "abstract" : "A closure that vends the text of the log message.",
    "name" : "body",
    "parent_name" : "LogMessage"
  },
  "types\/logmessage.html?swift#description2" : {
    "abstract" : "A string combining level and body.",
    "name" : "description",
    "parent_name" : "LogMessage"
  },
  "types\/logmessage.html?swift#handler" : {
    "abstract" : "A log message handler callback that can be passed to PersistentContainer.init(...)\nor PersistentCloudKitContainer.init(...) to receive various informational messages\nthat may be of interest to clients for their own logs.",
    "name" : "Handler",
    "parent_name" : "LogMessage"
  },
  "types\/logmessage.html?swift#level" : {
    "abstract" : "The category of the log message.",
    "name" : "level",
    "parent_name" : "LogMessage"
  },
  "types\/migrationdelegate.html?swift" : {
    "abstract" : "A delegate that can be provided to PersistentContainer or PersistentCloudKitContainer\nto receive events describing the progress of migrations. These events can be used to update a user\ninterface or for app internal logging.",
    "name" : "MigrationDelegate"
  },
  "types\/migrationdelegate.html?swift#persistentcontainer_didfailtomigratestoreerror" : {
    "abstract" : "Called after an error has occurred during or before migrating a store.\nThe PersistentContainer.loadPersistentStores error callback will be made later.",
    "name" : "persistentContainer(_:didFailToMigrateStore:error:)",
    "parent_name" : "MigrationDelegate"
  },
  "types\/migrationdelegate.html?swift#persistentcontainer_didmigratestore" : {
    "abstract" : "Called after a successful store migration.",
    "name" : "persistentContainer(_:didMigrateStore:)",
    "parent_name" : "MigrationDelegate"
  },
  "types\/migrationdelegate.html?swift#persistentcontainer_willconsiderstore" : {
    "abstract" : "Called for each store that might need to be migrated, before deciding whether to\nmigrate it.",
    "name" : "persistentContainer(_:willConsiderStore:)",
    "parent_name" : "MigrationDelegate"
  },
  "types\/migrationdelegate.html?swift#persistentcontainer_willmigratestoresourcemodelversiondestinationmodelversiontotalsteps" : {
    "abstract" : "Called for each store that will be migrated, before any migrations start for the store.",
    "name" : "persistentContainer(_:willMigrateStore:sourceModelVersion:destinationModelVersion:totalSteps:)",
    "parent_name" : "MigrationDelegate"
  },
  "types\/migrationdelegate.html?swift#persistentcontainer_willnotmigratestorestoreexists" : {
    "abstract" : "Called for each store that will not be migrated either because it does not exist or\nbecause it is already at the latest version.",
    "name" : "persistentContainer(_:willNotMigrateStore:storeExists:)",
    "parent_name" : "MigrationDelegate"
  },
  "types\/migrationdelegate.html?swift#persistentcontainer_willsinglemigratestoresourcemodelversiondestinationmodelversionusinginferredmappingwithmigrationmanagertotemporarylocationstepsremainingtotalsteps" : {
    "abstract" : "Called before each migration step.",
    "name" : "persistentContainer(_:willSingleMigrateStore:sourceModelVersion:destinationModelVersion:usingInferredMapping:withMigrationManager:toTemporaryLocation:stepsRemaining:totalSteps:)",
    "parent_name" : "MigrationDelegate"
  },
  "types\/migrationerror.html?swift" : {
    "abstract" : "Errors that can occur preventing persistent store loading, passed into the callback given to\nPersistentContainer.loadPersistentStores(...) or\nPersistentCloudKitContainer.loadPersistentStores(...).",
    "name" : "MigrationError"
  },
  "types\/migrationerror.html?swift#badmodelversionorder__" : {
    "abstract" : "Migration cannot precede because the ModelVersionOrder for the store is invalid.\nThis could mean:",
    "name" : "badModelVersionOrder(_:_:)",
    "parent_name" : "MigrationError"
  },
  "types\/migrationerror.html?swift#cannotfinddestinationmodel__" : {
    "abstract" : "Migration cannot proceed because the persistent container cannot find an object model\nthat matches the NSManagedObjectModel passed to PersistentContainer.init(...)\nor PersistentCloudKitContainer.init(...) in the list of bundles.\nThis means either a bundle is missing from the list or the NSManagedObjectModel has been\ncreated by merging several models – this second use case is not currently supported by the library. Sorry.",
    "name" : "cannotFindDestinationModel(_:_:)",
    "parent_name" : "MigrationError"
  },
  "types\/migrationerror.html?swift#cannotfindsourcemodel__" : {
    "abstract" : "Migration cannot proceed because the persistent container cannot find a managed object model\nthat is compatible with the persistent store’s metadata in the bundles passed to\nPersistentContainer.init(...) or PersistentCloudKitContainer.init(...).\nThe enum parameters are the particular store with the problem and the metadata of that\nstore that cannot be matched to a model.",
    "name" : "cannotFindSourceModel(_:_:)",
    "parent_name" : "MigrationError"
  },
  "types\/migrationerror.html?swift#coreqmigrationfailed_" : {
    "abstract" : "The persistent store has not been loaded because another store associated with the persistent\ncontainer required migration but there was an error attempting to migrate it. To avoid leaving\nthe app’s stores with a mixture of versions this store load has been abandoned.",
    "name" : "coreqMigrationFailed(_:)",
    "parent_name" : "MigrationError"
  },
  "types\/migrationerror.html?swift#cyclicroute1__" : {
    "abstract" : "Migration cannot proceed because the persistent container is confused: after examining\nall the model versions and mapping models it has not been able to understand the fastest way\nof migrating between the two model versions named in the string parameters.\nThis probably means there are cycles in the persistent container’s ModelVersionOrder.",
    "name" : "cyclicRoute1(_:_:)",
    "parent_name" : "MigrationError"
  },
  "types\/migrationerror.html?swift#cyclicroute2__" : {
    "abstract" : "Migration cannot proceed because the persistent container is confused: after examining all\nthe model versions and mapping models it has not been able to understand the fastest way\nof migrating between the two model versions named in the string parameters.\nThis also probably means there are cycles in the persistent container’s ModelVersionOrder.",
    "name" : "cyclicRoute2(_:_:)",
    "parent_name" : "MigrationError"
  },
  "types\/migrationerror.html?swift#cyclicroute3__" : {
    "abstract" : "Migration cannot proceed because the persistent container is confused: after examining all\nthe model versions and mapping models it has found a path involving a mapping model that leads\nfrom the store’s current model version back to itself.\nThis ALSO probably means there are cycles in the persistent container’s ModelVersionOrder.",
    "name" : "cyclicRoute3(_:_:)",
    "parent_name" : "MigrationError"
  },
  "types\/migrationerror.html?swift#description3" : {
    "abstract" : "A human-readable description of the error.",
    "name" : "description",
    "parent_name" : "MigrationError"
  },
  "types\/migrationerror.html?swift#logicfailure_" : {
    "abstract" : "Migration has failed due to what seems to be a bug in the library code or, less likely, its\ndependencies. Sorry about that. A bug report including as full a log output as possible would\nbe welcome. The string parameter is a brief explanation of the problem.",
    "name" : "logicFailure(_:)",
    "parent_name" : "MigrationError"
  },
  "types\/migrationerror.html?swift#noroutebetweenmodels__" : {
    "abstract" : "Migration cannot proceed because the persistent container cannot find a migration path\nfrom the source model version (first string parameter) to the destination model version (second string\nparameter) using mapping models from the bundles passed to PersistentContainer.init(...)\nor PersistentCloudKitContainer.init(...) combined with inferred mappings if enabled.\nPossible reasons include:",
    "name" : "noRouteBetweenModels(_:_:)",
    "parent_name" : "MigrationError"
  },
  "types\/modelversionorder.html?swift" : {
    "abstract" : "A rule for ordering model versions.  The persistent container performs automatic multi-step\nmigration in the direction defined by this rule, which operates on the names of the model\nversion.\nNote that the model version here is the part of its filename before ‘.xcdatamodel’ –\nnot the optional ‘Model Version Identifier’ that you can set in the model’s properties panel.",
    "name" : "ModelVersionOrder"
  },
  "types\/modelversionorder.html?swift#compare" : {
    "abstract" : "Compare the model versions directly, but interpreting numbers like a human – using\nthe NSString.CompareOptions.numeric algorithm, meaning that for example MyModel_v2\nprecedes MyModel_v10 and MyModel_A precedes MyModel_B.",
    "name" : "compare",
    "parent_name" : "ModelVersionOrder"
  },
  "types\/modelversionorder.html?swift#description6" : {
    "abstract" : "A human-readable description of the order",
    "name" : "description",
    "parent_name" : "ModelVersionOrder"
  },
  "types\/modelversionorder.html?swift#list_" : {
    "abstract" : "Explicitly list all the model versions in order.  The first element in the array is the\nthe earliest version and the last is the latest version.  Model versions not in the list are\nnot considered for migration.",
    "name" : "list(_:)",
    "parent_name" : "ModelVersionOrder"
  },
  "types\/modelversionorder.html?swift#pairlist_" : {
    "abstract" : "Explicitly list the entire set of migration pairs that are permitted.  This can be seen as\na stricter form of .list in that .list(A, B, C) will permit A->C but .pairList((A,B), (B,C))\nwill not allow A->C in a single migration step.  The library checks for cycles in the described\nmigrations.",
    "name" : "pairList(_:)",
    "parent_name" : "ModelVersionOrder"
  },
  "types\/modelversionorder.html?swift#patternmatchcompare_" : {
    "abstract" : "Match each model version against a regular expression pattern.  Then compare either the\nentire match or, if it exists, the first capture group, using the compare algorithm.",
    "name" : "patternMatchCompare(_:)",
    "parent_name" : "ModelVersionOrder"
  },
  "types\/modelversionorder.html?swift#perstore_" : {
    "abstract" : "Use a different order for different stores under the same container.",
    "name" : "perStore(_:)",
    "parent_name" : "ModelVersionOrder"
  },
  "types\/modelversionorder.html?swift#regexmatchcompare_" : {
    "abstract" : "Match each model version against a compiled regular expression.  Then compare either the\nentire match or, if it exists, the first capture group, using the compare algorithm.",
    "name" : "regexMatchCompare(_:)",
    "parent_name" : "ModelVersionOrder"
  },
  "types\/persistentcloudkitcontainer.html?objc#loadpersistentstorescompletionhandler" : {
    "abstract" : "Begin loading and migrating the persistent stores mentioned in persistentStoreDescriptions that have\nnot already been loaded. The completion handler is called once for each such store on the main queue\nindicating whether the store has been loaded successfully.",
    "name" : "-loadPersistentStoresWithCompletionHandler:",
    "parent_name" : "PersistentCloudKitContainer"
  },
  "types\/persistentcloudkitcontainer.html?swift" : {
    "abstract" : "A container for a Core Data stack that provides automatic multi-step shortest-path\npersistent store migration, capable of managing both CloudKit-backed and non-cloud stores.",
    "name" : "PersistentCloudKitContainer"
  },
  "types\/persistentcloudkitcontainer.html?swift#initnamebundlesmodelversionorderlogmessagehandler" : {
    "abstract" : "Initializes a persistent container from a named model.",
    "name" : "init(name:bundles:modelVersionOrder:logMessageHandler:)",
    "parent_name" : "PersistentCloudKitContainer"
  },
  "types\/persistentcloudkitcontainer.html?swift#initnamemanagedobjectmodelbundlesmodelversionorderlogmessagehandler" : {
    "abstract" : "Initializes a persistent container using a managed object model.",
    "name" : "init(name:managedObjectModel:bundles:modelVersionOrder:logMessageHandler:)",
    "parent_name" : "PersistentCloudKitContainer"
  },
  "types\/persistentcloudkitcontainer.html?swift#loadpersistentstorescompletionhandler" : {
    "abstract" : "Begin loading and migrating the persistent stores mentioned in persistentStoreDescriptions that have\nnot already been loaded. The completion handler is called once for each such store on the main queue\nindicating whether the store has been loaded successfully.",
    "name" : "loadPersistentStores(completionHandler:)",
    "parent_name" : "PersistentCloudKitContainer"
  },
  "types\/persistentcloudkitcontainer.html?swift#migrationdelegate2" : {
    "abstract" : "Optional delegate to receive migration progress notifications.",
    "name" : "migrationDelegate",
    "parent_name" : "PersistentCloudKitContainer"
  },
  "types\/persistentcontainer.html?objc#loadpersistentstorescompletionhandler1" : {
    "abstract" : "Begin loading and migrating the persistent stores mentioned in persistentStoreDescriptions that have\nnot already been loaded. The completion handler is called once for each such store on the main queue\nindicating whether the store has been loaded successfully.",
    "name" : "-loadPersistentStoresWithCompletionHandler:",
    "parent_name" : "PersistentContainer"
  },
  "types\/persistentcontainer.html?swift" : {
    "abstract" : "A container for a Core Data stack that provides automatic multi-step shortest-path\npersistent store migration.",
    "name" : "PersistentContainer"
  },
  "types\/persistentcontainer.html?swift#initnamebundlesmodelversionorderlogmessagehandler1" : {
    "abstract" : "Initializes a persistent container from a named model.",
    "name" : "init(name:bundles:modelVersionOrder:logMessageHandler:)",
    "parent_name" : "PersistentContainer"
  },
  "types\/persistentcontainer.html?swift#initnamemanagedobjectmodelbundlesmodelversionorderlogmessagehandler1" : {
    "abstract" : "Initializes a persistent container using a managed object model.",
    "name" : "init(name:managedObjectModel:bundles:modelVersionOrder:logMessageHandler:)",
    "parent_name" : "PersistentContainer"
  },
  "types\/persistentcontainer.html?swift#loadpersistentstorescompletionhandler1" : {
    "abstract" : "Begin loading and migrating the persistent stores mentioned in persistentStoreDescriptions that have\nnot already been loaded. The completion handler is called once for each such store on the main queue\nindicating whether the store has been loaded successfully.",
    "name" : "loadPersistentStores(completionHandler:)",
    "parent_name" : "PersistentContainer"
  },
  "types\/persistentcontainer.html?swift#migrationdelegate4" : {
    "abstract" : "Optional delegate to receive migration progress notifications.",
    "name" : "migrationDelegate",
    "parent_name" : "PersistentContainer"
  }
}